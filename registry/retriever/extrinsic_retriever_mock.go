// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package retriever

import (
	registry "github.com/polkadot-go/api/v4/registry"
	types "github.com/polkadot-go/api/v4/types"
	mock "github.com/stretchr/testify/mock"
)

// ExtrinsicRetrieverMock is an autogenerated mock type for the ExtrinsicRetriever type
type ExtrinsicRetrieverMock struct {
	mock.Mock
}

// GetExtrinsics provides a mock function with given fields: blockHash
func (_m *ExtrinsicRetrieverMock) GetExtrinsics(blockHash types.Hash) ([]*registry.DecodedExtrinsic, error) {
	ret := _m.Called(blockHash)

	var r0 []*registry.DecodedExtrinsic
	if rf, ok := ret.Get(0).(func(types.Hash) []*registry.DecodedExtrinsic); ok {
		r0 = rf(blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*registry.DecodedExtrinsic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Hash) error); ok {
		r1 = rf(blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewExtrinsicRetrieverMockT interface {
	mock.TestingT
	Cleanup(func())
}

// NewExtrinsicRetrieverMock creates a new instance of ExtrinsicRetrieverMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExtrinsicRetrieverMock(t NewExtrinsicRetrieverMockT) *ExtrinsicRetrieverMock {
	mock := &ExtrinsicRetrieverMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
